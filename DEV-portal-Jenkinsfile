node('master') {

    stage('Startup') {
        // stop pending builds.
        sh 'oc cancel-build bc/portal'
        sh 'oc cancel-build bc/portal-sonar'
    }
    stage('Build') {        
        parallel('SonarQube Scan' : {
            echo "Running SonarQube static code analysis..."
    openshiftBuild bldCfg: 'portal-sonar', showBuildLogs: 'true'
        }, 'Application Image' : {
            echo "Building Application image..."
            openshiftBuild bldCfg: 'portal', showBuildLogs: 'true'
            openshiftTag destStream: 'portal', verbose: 'true', destTag: '$BUILD_ID', srcStream: 'portal', srcTag: 'latest'
        })
    }

    stage('Deploy on Dev') {
        echo "Deploying to dev..."
        openshiftTag destStream: 'portal', verbose: 'true', destTag: 'dev', srcStream: 'portal', srcTag: '$BUILD_ID'
        //Sleeping for a while to wait deployment completes
        sh 'sleep 1m'
    }
}

// ZAP security scan. commented out due to issues with Pathfinder OpenShift

podTemplate(label: 'owasp-zap2', name: 'owasp-zap2', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
    containerTemplate(
        name: 'jnlp',
        image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
        resourceRequestCpu: '500m',
        resourceLimitCpu: '1000m',
        resourceRequestMemory: '3Gi',
        resourceLimitMemory: '4Gi',
        workingDir: '/home/jenkins',
        command: '',
        args: '${computer.jnlpmac} ${computer.name}'
    )
])
{
    stage('ZAP Security Scan')
    {
        node('owasp-zap2') {
            //the checkout is mandatory
            echo "checking out source"
            echo "Build: ${BUILD_ID}"
            checkout scm

            dir('/zap') {
                def retVal = sh returnStatus: true, script: '/zap/zap-baseline.py -r baseline.html -t http://portal-jag-isb-devorg.pathfinder.bcgov'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'baseline.html', reportName: 'ZAP Baseline Scan', reportTitles: 'ZAP Baseline Scan'])
                echo "Return value is: ${retVal}"

            }
        }
    }
}

node('nodejs') {
    stage('Angular Unit Tests') {
        //the checkout is mandatory, otherwise functional test would fail
        echo "checking out source"
        echo "Build: ${BUILD_ID}"
        checkout scm
        dir('portal-app/ClientApp') {
            try {
                // sh 'Xvfb :1 -screen 0 1024x768x24 &'
                // sh 'export DISPLAY=:1'
                sh 'npm install -g @angular/cli'
                sh 'npm install'				                
				sh 'npm run test-headless'
            } finally {
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.xml'
                junit 'junit.xml'
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'unit-tests.html',
                    reportName: "Unit Test Report"
                ])
            }
        }
    }
}


stage('Deploy on Test') {
    node('master') {
        openshiftTag destStream: 'portal', verbose: 'true', destTag: 'test', srcStream: 'portal', srcTag: '$BUILD_ID'
    }
}

